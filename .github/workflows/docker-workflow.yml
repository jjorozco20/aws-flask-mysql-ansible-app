name: Docker Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  validate-and-push:
    runs-on: ubuntu-latest
    environment: devops-training

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        path: ./flask-app  # Specify if your code is in a subdirectory

    # Step 2: Configure AWS credentials ERROR HERE <----------------------------------------------
    # This assumes you've stored AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY in your GitHub Secrets.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Debug Dockerfile presence
      run: |
        echo "Listing files in the current directory:"
        ls -al

    - name: Verify Dockerfile
      run: |
        echo "Looking for Dockerfile..."
        ls -al

    # Step 4: Build and tag
    - name: Build and Tag Docker Image
      run: |
        aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.ECR_REPO }}

        # Build the Docker image
        cd /flask-app
        docker build -f ./Dockerfile \
          --build-arg MYSQL_USER=${{ vars.MYSQL_USER }} \
          --build-arg MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
          --build-arg MYSQL_DB=${{ vars.MYSQL_DB }} \
          -t "${{ vars.IMAGE_NAME }}:${{ vars.IMAGE_TAG }}" .

        # Tag the image for ECR
        docker tag "${{ vars.IMAGE_NAME }}:${{ vars.IMAGE_TAG }}" "${{ vars.ECR_REPO }}/${{ vars.IMAGE_NAME }}:${{ vars.IMAGE_TAG }}"

    - name: Push to Amazon ECR
      run: |
        docker push "${{ vars.ECR_REPO }}/${{ vars.IMAGE_NAME }}:${{ vars.IMAGE_TAG }}"
